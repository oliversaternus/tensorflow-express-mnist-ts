{"version":3,"sources":["utils/canvasUtils.ts","utils/imageUtils.ts","utils/fetchUtils.ts","components/Button.tsx","components/LoadingIndicator.tsx","components/ClassificationDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["canvas","context","flag","prevX","currX","prevY","currY","initialized","findXY","res","e","clientX","offsetLeft","clientY","offsetTop","beginPath","fillStyle","fillRect","closePath","moveTo","lineTo","strokeStyle","lineWidth","stroke","arc","Math","PI","fill","getImageData","getImageDataUrl","toDataURL","reshape","image","reshaped","i","temp","j","push","data","scale","scaled","sum","m","n","centerImage","diff","minM","length","maxM","minN","maxN","all","mDiff","floor","nDiff","calcMassCenterDiff","moved","itemp","jtemp","concat","fetchImageClass","a","undefined","fetch","headers","method","body","JSON","stringify","result","json","prediction","Number","console","log","Button","props","onClick","children","style","className","classes","LoadingIndicator","version","xmlns","x","y","viewBox","d","ClassificationDialog","open","useState","classification","setClassification","imageDataUrl","setImageDataUrl","useEffect","centeredImage","onOkClick","onClose","Fragment","alt","src","margin","width","height","App","ref","useRef","dialogOpen","setDialogOpen","pCanvas","current","getContext","addEventListener","touch","touches","MouseEvent","onRecognizeClick","marginTop","clearRect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAAIA,EACAC,E,sEACAC,GAAO,EACPC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EAERC,GAAc,EAyBZC,EAAS,SAACC,EAAqCC,GACrC,SAARD,IACAN,EAAQC,EACRC,EAAQC,EACRF,EAAQM,EAAEC,QAAUX,EAAOY,WAC3BN,EAAQI,EAAEG,QAAUb,EAAOc,UAE3BZ,GAAO,GACI,IAEPD,EAAQc,YACRd,EAAQe,UAlCF,UAmCNf,EAAQgB,SAASb,EAAOE,EAAO,EAAG,GAClCL,EAAQiB,aACG,IAGP,OAART,GAAwB,QAARA,IAChBP,GAAO,GAEC,SAARO,GACIP,IACAC,EAAQC,EACRC,EAAQC,EACRF,EAAQM,EAAEC,QAAUX,EAAOY,WAC3BN,EAAQI,EAAEG,QAAUb,EAAOc,UA5CnCb,EAAQc,YACRd,EAAQkB,OAAOhB,EAAOE,GACtBJ,EAAQmB,OAAOhB,EAAOE,GACtBL,EAAQoB,YAPM,UAQdpB,EAAQqB,UAPM,GAQdrB,EAAQsB,SACRtB,EAAQiB,YACRjB,EAAQc,YACRd,EAAQuB,IAAIrB,EAAOE,EAAO,KAAqB,EAAG,EAAIoB,KAAKC,IAC3DzB,EAAQe,UAbM,UAcdf,EAAQ0B,OACR1B,EAAQiB,YACRjB,EAAQc,YACRd,EAAQuB,IAAIpB,EAAOE,EAAO,KAAqB,EAAG,EAAImB,KAAKC,IAC3DzB,EAAQe,UAlBM,UAmBdf,EAAQ0B,OACR1B,EAAQiB,cAuECU,EAAe,WACxB,GAAKrB,EAGL,OAAON,EAAQ2B,aAAa,EAAG,EAAG,IAAK,MAU9BC,EAAkB,WAC3B,GAAKtB,EAGL,OAAOP,EAAO8B,aCvHX,SAASC,EAAQC,GAEpB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAE1B,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,IAAKA,IACrBD,EAAKE,KAAKL,EAAMM,KAAqB,GAAX,IAAJJ,EAAUE,GAAS,IAE7CH,EAASI,KAAKF,GAElB,OAAOF,EAGJ,SAASM,EAAMP,GAElB,IADA,IAAMQ,EAAS,GACNN,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIK,EAAM,EACDC,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBF,GAAOT,EAAM,GAAKE,EAAIQ,GAAG,GAAKN,EAAIO,GAG1CR,EAAKE,KAAKI,EAAM,KAEpBD,EAAOH,KAAKF,GAEhB,OAAOK,EAsDJ,SAASI,EAAYZ,GACxB,IAAMa,EApDH,SAA4Bb,GAQ/B,IAPA,IAAIU,EAAI,EACJC,EAAI,EACJG,EAAOd,EAAMe,OAAS,EACtBC,EAAO,EACPC,EAAOjB,EAAMe,OAAS,EACtBG,EAAO,EACPC,EAAM,EACDjB,EAAI,EAAGA,EAAIF,EAAMe,OAAQb,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAM,GAAGe,OAAQX,IACjCM,GAAKV,EAAME,GAAGE,GAAKF,EACnBS,GAAKX,EAAME,GAAGE,GAAKA,EACnBe,GAAOnB,EAAME,GAAGE,GACI,IAAhBJ,EAAME,GAAGE,KACLF,EAAIY,IACJA,EAAOZ,GAEPA,EAAIc,IACJA,EAAOd,GAEPE,EAAIa,IACJA,EAAOb,GAEPA,EAAIc,IACJA,EAAOd,IAKvB,GAAIY,EAAOF,GAAQI,EAAOD,EACtB,OAAO,EAEX,IAAIG,EAAQ3B,KAAK4B,MAAMX,EAAIS,EAAMnB,EAAMe,OAAS,GAC5CO,EAAQ7B,KAAK4B,MAAMV,EAAIQ,EAAMnB,EAAM,GAAGe,OAAS,GAenD,OAbIC,EAAOI,EAAQ,KACfA,EAAQ,GAAKJ,GAEbE,EAAOI,EAAQ,KACfA,EAAQ,GAAKJ,GAEbJ,EAAOM,EAAQ,IACfA,EAAQ,EAAIN,GAEZG,EAAOK,EAAQ,IACfA,EAAQ,EAAIL,GAGT,CAACG,EAAOE,GAIFC,CAAmBvB,GAChC,GAAKa,EAAL,CAIA,IADA,IAAIW,EAAkB,GACbtB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMqB,EAAQvB,EAAIW,EAAK,GACjBa,EAAQtB,EAAIS,EAAK,GAErBV,EAAKC,GADHqB,EAAQ,GAAKA,EAAQ,IAAMC,EAAQ,GAAKA,EAAQ,GACxC,EAEA1B,EAAMyB,GAAOC,GAG3BF,EAAQA,EAAMG,OAAOxB,GAEvB,OAAOqB,GCpGJ,SAAeI,EAAtB,kC,4CAAO,WAA+B5B,GAA/B,mBAAA6B,EAAA,yDACE7B,EADF,8CAEQ8B,GAFR,gCAKsBC,MAAM,YAAa,CACpCC,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUpC,KAV1B,cAKOqC,EALP,gBAYoBA,EAAOC,OAZ3B,cAYOhC,EAZP,OAaOiC,EAAaC,OAAOlC,EAAKiC,YAbhC,kBAcQA,GAdR,yCAgBCE,QAAQC,IAAR,MAhBD,uBAiBQZ,GAjBR,2D,gCCoBQa,EAXuB,SAACC,GAAW,IACtCC,EAAwCD,EAAxCC,QAASC,EAA+BF,EAA/BE,SAAUC,EAAqBH,EAArBG,MAAOC,EAAcJ,EAAdI,UAC5BC,EAAU,oBAAsBD,EAAY,IAAMA,EAAY,IAEpE,OACI,yBAAKH,QAASA,EAASG,UAAWC,EAASF,MAAOA,GAC7CD,ICAEI,G,MAZU,WACrB,OACI,yBAAKF,UAAU,qBACX,yBAAKA,UAAU,oBAAoBG,QAAQ,MAAMC,MAAM,6BAA6BC,EAAE,MAAMC,EAAE,MAAMC,QAAQ,aACxG,0BAAMC,EAAE,+XC2DTC,G,MArDmD,SAACb,GAAW,IAClEc,EAASd,EAATc,KADiE,EAE7BC,qBAF6B,mBAElEC,EAFkE,KAElDC,EAFkD,OAGjCF,qBAHiC,mBAGlEG,EAHkE,KAGpDC,EAHoD,KAKzEC,qBAAU,WAaN,OAZA,sBAAC,oCAAAnC,EAAA,yDACS7B,EAAQ0D,GAAQ9D,IADzB,wDAKGmE,EAAgBlE,KACVI,EAAWF,EAAQC,GACnBQ,EAASD,EAAMN,GACfgE,EAAgBrD,EAAYJ,GARrC,SASwBoB,EAAgBqC,GATxC,OASS5B,EATT,OAUGwB,EAAkBxB,GAVrB,2CAAD,GAYO,WACH0B,OAAgBjC,GAChB+B,OAAkB/B,OAI1B,IAAMoC,EAAS,uCAAG,4BAAArC,EAAA,uDACNsC,EAAYvB,EAAZuB,UAEJA,IAHU,2CAAH,qDAOf,OACI,kBAAC,IAAMC,SAAP,KACKV,GACG,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,eACA,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,0BACVc,GAAgB,yBAAKO,IAAI,GAAGrB,UAAU,eAAesB,IAAKR,KAE/D,yBAAKf,MAAO,CAAEpD,KAAM,oBAAqB4E,OAAQ,IAAMC,MAAM,OAAOC,OAAO,OAAOtB,QAAQ,MAAMC,MAAM,6BAA6BC,EAAE,MAAMC,EAAE,MAAMC,QAAQ,aACvJ,0BAAMC,EAAE,+PAEQ1B,IAAnB8B,EAA+B,kBAAC,EAAD,MAAuBA,GAE3D,kBAAC,EAAD,CAAQf,QAASqB,GAAjB,W,MC1BTQ,MA3Bf,WACE,IAAMC,EAAMC,mBADC,EAEuBjB,oBAAS,GAFhC,mBAENkB,EAFM,KAEMC,EAFN,KAIbd,qBAAU,WNsDc,IAACe,IMrDZJ,EAAIK,QNuDf/G,GADAD,EAAS+G,GACQE,WAAW,MAE5BjH,EAAOkH,iBAAiB,aAAa,SAACxG,GAClCF,EAAO,OAAQE,MAChB,GACHV,EAAOkH,iBAAiB,aAAa,SAACxG,GAClCF,EAAO,OAAQE,MAChB,GACHV,EAAOkH,iBAAiB,WAAW,SAACxG,GAChCF,EAAO,KAAME,MACd,GACHV,EAAOkH,iBAAiB,YAAY,SAACxG,GACjCF,EAAO,MAAOE,MACf,GACHV,EAAOkH,iBAAiB,aAAa,SAACxG,GAClC,IAAMyG,EAAQzG,EAAE0G,QAAQ,GACxB5G,EAAO,OAAQ,IAAI6G,WAAW,YAAa,CACvC1G,QAASwG,EAAMxG,QACfE,QAASsG,EAAMtG,cAEpB,GACHb,EAAOkH,iBAAiB,cAAc,SAACxG,GACnC,IAAMyG,EAAQzG,EAAE0G,QAAQ,GACxB5G,EAAO,OAAQ,IAAI6G,WAAW,YAAa,CACvC1G,QAASwG,EAAMxG,QACfE,QAASsG,EAAMtG,cAEpB,GACHb,EAAOkH,iBAAiB,YAAY,SAACxG,GACjCF,EAAO,KAAM,IAAI6G,WAAW,UAAW,QACxC,GAEH9G,GAAc,KMpFhB,IAAM+G,EAAgB,uCAAG,sBAAAzD,EAAA,sDACvBiD,GAAc,GADS,2CAAH,qDAStB,OACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,QAAf,gEACA,4BAAQA,UAAU,SAAS2B,IAAKA,EAAKH,MAAM,MAAMC,OAAO,QACxD,kBAAC,EAAD,CAAQ5B,QAASyC,EAAkBvC,MAAO,CAAEwC,UAAW,KAAvD,aACA,kBAAC,EAAD,CAAsB7B,KAAMmB,EAAYV,QAVxB,WN2Fb5F,GAGLN,EAAQuH,UAAU,EAAG,EAAG,IAAK,KM5F7BV,GAAc,QCREW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.6e7b3b1c.chunk.js","sourcesContent":["let canvas: HTMLCanvasElement;\r\nlet context: CanvasRenderingContext2D;\r\nlet flag = false;\r\nlet prevX = 0;\r\nlet currX = 0;\r\nlet prevY = 0;\r\nlet currY = 0;\r\nlet dot_flag = false;\r\nlet initialized = false;\r\n\r\nconst fillStyle = \"#415f78\";\r\nconst lineWidth = 48;\r\n\r\nconst draw = () => {\r\n    context.beginPath();\r\n    context.moveTo(prevX, prevY);\r\n    context.lineTo(currX, currY);\r\n    context.strokeStyle = fillStyle;\r\n    context.lineWidth = lineWidth;\r\n    context.stroke();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.arc(prevX, prevY, (lineWidth - 1) / 2, 0, 2 * Math.PI);\r\n    context.fillStyle = fillStyle;\r\n    context.fill();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.arc(currX, currY, (lineWidth - 1) / 2, 0, 2 * Math.PI);\r\n    context.fillStyle = fillStyle;\r\n    context.fill();\r\n    context.closePath();\r\n}\r\n\r\nconst findXY = (res: 'move' | 'down' | 'up' | 'out', e: MouseEvent) => {\r\n    if (res === 'down') {\r\n        prevX = currX;\r\n        prevY = currY;\r\n        currX = e.clientX - canvas.offsetLeft;\r\n        currY = e.clientY - canvas.offsetTop;\r\n\r\n        flag = true;\r\n        dot_flag = true;\r\n        if (dot_flag) {\r\n            context.beginPath();\r\n            context.fillStyle = fillStyle;\r\n            context.fillRect(currX, currY, 2, 2);\r\n            context.closePath();\r\n            dot_flag = false;\r\n        }\r\n    }\r\n    if (res === 'up' || res === 'out') {\r\n        flag = false;\r\n    }\r\n    if (res === 'move') {\r\n        if (flag) {\r\n            prevX = currX;\r\n            prevY = currY;\r\n            currX = e.clientX - canvas.offsetLeft;\r\n            currY = e.clientY - canvas.offsetTop;\r\n            draw();\r\n        }\r\n    }\r\n}\r\n\r\nexport const initialize = (pCanvas: HTMLCanvasElement) => {\r\n    canvas = pCanvas;\r\n    context = canvas.getContext('2d')!;\r\n\r\n    canvas.addEventListener(\"mousemove\", (e) => {\r\n        findXY('move', e)\r\n    }, false);\r\n    canvas.addEventListener(\"mousedown\", (e) => {\r\n        findXY('down', e)\r\n    }, false);\r\n    canvas.addEventListener(\"mouseup\", (e) => {\r\n        findXY('up', e)\r\n    }, false);\r\n    canvas.addEventListener(\"mouseout\", (e) => {\r\n        findXY('out', e)\r\n    }, false);\r\n    canvas.addEventListener(\"touchmove\", (e) => {\r\n        const touch = e.touches[0];\r\n        findXY('move', new MouseEvent(\"mousemove\", {\r\n            clientX: touch.clientX,\r\n            clientY: touch.clientY\r\n        }));\r\n    }, false);\r\n    canvas.addEventListener(\"touchstart\", (e) => {\r\n        const touch = e.touches[0];\r\n        findXY('down', new MouseEvent(\"mousedown\", {\r\n            clientX: touch.clientX,\r\n            clientY: touch.clientY\r\n        }));\r\n    }, false);\r\n    canvas.addEventListener(\"touchend\", (e) => {\r\n        findXY('up', new MouseEvent(\"mouseup\", {}));\r\n    }, false);\r\n\r\n    initialized = true;\r\n};\r\n\r\nexport const getImageData = () => {\r\n    if (!initialized) {\r\n        return undefined;\r\n    }\r\n    return context.getImageData(0, 0, 420, 420);\r\n};\r\n\r\nexport const clear = () => {\r\n    if (!initialized) {\r\n        return;\r\n    }\r\n    context.clearRect(0, 0, 420, 420);\r\n};\r\n\r\nexport const getImageDataUrl = () => {\r\n    if (!initialized) {\r\n        return undefined;\r\n    }\r\n    return canvas.toDataURL();\r\n};","export function reshape(image: ImageData) {\r\n    const reshaped = [];\r\n    for (let i = 0; i < 420; i++) {\r\n        let temp = [];\r\n        for (let j = 0; j < 420; j++) {\r\n            temp.push(image.data[(i * 420 + j) * 4 + 3]);\r\n        }\r\n        reshaped.push(temp);\r\n    }\r\n    return reshaped;\r\n}\r\n\r\nexport function scale(image: number[][]) {\r\n    const scaled = [];\r\n    for (let i = 0; i < 28; i++) {\r\n        let temp = [];\r\n        for (let j = 0; j < 28; j++) {\r\n            let sum = 0;\r\n            for (let m = 0; m < 15; m++) {\r\n                for (let n = 0; n < 15; n++) {\r\n                    sum += image[15 * i + m][15 * j + n];\r\n                }\r\n            }\r\n            temp.push(sum / 225);\r\n        }\r\n        scaled.push(temp);\r\n    }\r\n    return scaled;\r\n}\r\n\r\nexport function calcMassCenterDiff(image: number[][]) {\r\n    let m = 0;\r\n    let n = 0;\r\n    let minM = image.length - 1;\r\n    let maxM = 0;\r\n    let minN = image.length - 1;\r\n    let maxN = 0;\r\n    let all = 0;\r\n    for (let i = 0; i < image.length; i++) {\r\n        for (let j = 0; j < image[0].length; j++) {\r\n            m += image[i][j] * i;\r\n            n += image[i][j] * j;\r\n            all += image[i][j];\r\n            if (image[i][j] !== 0) {\r\n                if (i < minM) {\r\n                    minM = i;\r\n                }\r\n                if (i > maxM) {\r\n                    maxM = i;\r\n                }\r\n                if (j < minN) {\r\n                    minN = j;\r\n                }\r\n                if (j > maxN) {\r\n                    maxN = j;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (maxM < minM || maxN < minN) {\r\n        return false;\r\n    }\r\n    let mDiff = Math.floor(m / all - image.length / 2);\r\n    let nDiff = Math.floor(n / all - image[0].length / 2);\r\n\r\n    if (maxM - mDiff > 27) {\r\n        mDiff = 27 - maxM;\r\n    }\r\n    if (maxN - nDiff > 27) {\r\n        nDiff = 27 - maxN;\r\n    }\r\n    if (minM - mDiff < 0) {\r\n        mDiff = 0 - minM;\r\n    }\r\n    if (minN - nDiff < 0) {\r\n        nDiff = 0 - minN;\r\n    }\r\n\r\n    return [mDiff, nDiff];\r\n}\r\n\r\nexport function centerImage(image: number[][]){\r\n    const diff = calcMassCenterDiff(image);\r\n    if (!diff) {\r\n      return undefined;\r\n    }\r\n    let moved: number[] = [];\r\n    for (let i = 0; i < 28; i++) {\r\n      let temp = [];\r\n      for (let j = 0; j < 28; j++) {\r\n        const itemp = i + diff[0];\r\n        const jtemp = j + diff[1];\r\n        if (itemp < 0 || itemp > 27 || jtemp < 0 || jtemp > 27) {\r\n          temp[j] = 0;\r\n        } else {\r\n          temp[j] = image[itemp][jtemp];\r\n        }\r\n      }\r\n      moved = moved.concat(temp);\r\n    }\r\n    return moved;\r\n}","export async function fetchImageClass(image?: number[]) {\r\n    if (!image) {\r\n        return undefined;\r\n    }\r\n    try {\r\n        const result = await fetch('/classify', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(image)\r\n        });\r\n        const data = await result.json();\r\n        const prediction = Number(data.prediction);\r\n        return prediction;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}","import React from 'react';\r\nimport './Button.css';\r\n\r\ntype ButtonProps = {\r\n    onClick: () => void;\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = (props) => {\r\n    const { onClick, children, style, className } = props;\r\n    const classes = 'button-container' + (className ? ' ' + className : '');\r\n\r\n    return (\r\n        <div onClick={onClick} className={classes} style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <svg className=\"loading-indicator\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" >\r\n                <path d=\"M31.9,63.7C14.4,63.7,0,49.3,0,31.9S14.4,0.3,31.9,0.3c4.7,0,9.4,1.1,13.9,3c1.4,0.6,1.9,2.2,1.4,3.6s-2.2,1.9-3.6,1.4\r\n       C39.9,6.6,36,5.8,32.1,5.8c-14.4,0-26,11.6-26,26s11.6,26,26,26c10,0,19.1-5.5,23.5-14.7c1.7-3.6,2.5-7.5,2.5-11.4\r\n       c0-2.8-0.3-5.3-1.1-7.8c-0.6-1.4,0.3-3,1.9-3.6c1.4-0.6,3,0.3,3.6,1.9c0.8,3,1.4,6.4,1.4,9.4c0,4.7-1.1,9.4-3,13.9\r\n       C55.1,56.5,43.8,63.7,31.9,63.7z\"/>\r\n            </svg>\r\n        </div>);\r\n};\r\n\r\nexport default LoadingIndicator;","import React, { useEffect, useState } from 'react';\r\nimport { reshape, scale, centerImage } from '.././utils/imageUtils';\r\nimport { fetchImageClass } from '.././utils/fetchUtils';\r\nimport { getImageData, getImageDataUrl } from '.././utils/canvasUtils';\r\nimport Button from './Button';\r\nimport LoadingIndicator from './LoadingIndicator';\r\nimport './ClassificationDialog.css';\r\n\r\ntype ClassificationDialogProps = {\r\n    open?: boolean;\r\n    onClose?: () => void;\r\n};\r\n\r\nconst ClassificationDialog: React.FC<ClassificationDialogProps> = (props) => {\r\n    const { open } = props;\r\n    const [classification, setClassification] = useState<Number>();\r\n    const [imageDataUrl, setImageDataUrl] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const image = open && getImageData();\r\n            if (!image) {\r\n                return;\r\n            }\r\n            setImageDataUrl(getImageDataUrl());\r\n            const reshaped = reshape(image);\r\n            const scaled = scale(reshaped);\r\n            const centeredImage = centerImage(scaled);\r\n            const result = await fetchImageClass(centeredImage);\r\n            setClassification(result);\r\n        })();\r\n        return () => {\r\n            setImageDataUrl(undefined);\r\n            setClassification(undefined);\r\n        };\r\n    });\r\n\r\n    const onOkClick = async () => {\r\n        const { onClose } = props;\r\n        if (onClose) {\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {open &&\r\n                <div className=\"dialog-background\">\r\n                    <div className=\"dialog-content\">\r\n                        <div className=\"dialog-title\">Recognizing</div>\r\n                        <div className=\"dialog-main-container\">\r\n                            <div className=\"dialog-image-container\">\r\n                                {imageDataUrl && <img alt='' className=\"dialog-image\" src={imageDataUrl} />}\r\n                            </div>\r\n                            <svg style={{ fill: 'rgb(43, 100, 146)', margin: 12 }} width=\"32px\" height=\"32px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" >\r\n                                <path d=\"M62.6,28.3l-7.5-8.8c-1.1-1.1-2.7-1.3-3.7-0.3c-1.1,1.1-1.3,2.7-0.3,3.7l5.3,6.4H2.7c-1.6,0-2.7,1.1-2.7,2.7s1.1,2.7,2.7,2.7h53.8l-5.3,6.4c-1.1,1.1-0.8,2.9,0.3,3.7c0.5,0.5,1.1,0.5,1.6,0.5c0.8,0,1.6-0.3,2.1-1.1l7.5-8.8C64.5,33.7,64.5,30.5,62.6,28.3z\" />\r\n                            </svg>\r\n                            {classification === undefined ? <LoadingIndicator /> : classification}\r\n                        </div>\r\n                        <Button onClick={onOkClick}>OK</Button>\r\n                    </div>\r\n                </div>}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ClassificationDialog;\r\n","import React, { useRef, useEffect, useState } from 'react';\nimport { initialize, clear } from './utils/canvasUtils';\nimport ClassificationDialog from './components/ClassificationDialog';\nimport Button from './components/Button';\nimport './App.css';\n\nfunction App() {\n  const ref = useRef() as React.MutableRefObject<HTMLCanvasElement>;\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    initialize(ref.current);\n  });\n\n  const onRecognizeClick = async () => {\n    setDialogOpen(true);\n  }\n\n  const closeDialog = () => {\n    clear();\n    setDialogOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"info\">Draw a digit on the canvas and click the \"RECOGNIZE\" button.</div>\n      <canvas className=\"canvas\" ref={ref} width=\"420\" height=\"420\"></canvas>\n      <Button onClick={onRecognizeClick} style={{ marginTop: 12 }}>RECOGNIZE</Button>\n      <ClassificationDialog open={dialogOpen} onClose={closeDialog} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}